

# This file was *autogenerated* from the file verifier.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4)
from channel import CommunicateComponent, Channel
from Host import Host
class Verifier:
	def __init__(self, id, domain, channel):
		self.id = id
		self.domain = domain
		self.channel = channel
		self.componet = CommunicateComponent(self.domain, "verifier", self.id)
		self.channel.register(self.componet)
	
	def send(self, dst, id = None, **kwargv):
		if dst == 'public':
			domain_id = self.domain.id
			self.channel.Multicast('verifier', self.id, domain_id, **kwargv)
		else:
			self.channel.Unicast('verifier', self.id, dst, id, **kwargv)

	def sign_response(self,host):
		host_id = host.id
		# receive W, t, u, w
		c1 = ZZ.random_element()
		c2 = ZZ.random_element()
		self.send('host', host_id, c1 = c1, c2 = c2)
		return c1, c2
		
	def verify(self, host: Host, c1, c2):
		host_id = host.id

		A1 = self.componet.get('host', host_id, 'A1')
		A2 = self.componet.get('host', host_id, 'A2')
		B = self.componet.get('host', host_id, 'B')

		z1 = self.componet.get('host', host_id, 'z1')
		z2 = self.componet.get('host', host_id, 'z2')
		z3 = self.componet.get('host', host_id, 'z3')
		z4 = self.componet.get('host', host_id, 'z4')
		z5 = self.componet.get('host', host_id, 'z5')
		z6 = self.componet.get('host', host_id, 'z6')
		zp = self.componet.get('host', host_id, 'zp')

		W1 = self.componet.get('host', host_id, 'W1')
		W2 = self.componet.get('host', host_id, 'W2')
		W3 = self.componet.get('host', host_id, 'W3')
		W4 = self.componet.get('host', host_id, 'W4')

		# c1 = self.componet.get('host', host_id, 'c1')
		# c2 = self.componet.get('host', host_id, 'c2')

		t1 = self.componet.get('host', host_id, 't1')
		t2 = self.componet.get('host', host_id, 't2')
		t3 = self.componet.get('host', host_id, 't3')
		t4 = self.componet.get('host', host_id, 't4')

		r = self.componet.get('host', host_id, 'r')
		d = self.componet.get('host', host_id, 'd')
		nym = self.componet.get('host', host_id, 'nym')
		t = self.componet.get('host', host_id, 't')
		w = self.componet.get('host', host_id, 'w')
		v = self.componet.get('host', host_id, 'v')
		u = self.componet.get('host', host_id, 'u')
		a = self.componet.get('host', host_id, 'a')

		g = self.componet.get('issuer', self.domain.id, 'g')
		H = self.componet.get('issuer', self.domain.id, 'H')
		b = self.componet.get('issuer', self.domain.id, 'b')


		f = c1 * t - B * zp
		if(	(A1[_sage_const_0 ] * z1 +A2[_sage_const_0 ][_sage_const_0 ] * zp[_sage_const_0 ][_sage_const_0 ] != W1 + c1 * t1) 	|
	 		(A1[_sage_const_1 ] * z2 +A2[_sage_const_0 ][_sage_const_1 ] * zp[_sage_const_1 ][_sage_const_0 ] != W2 + c1 * t2) 	|
			(A1[_sage_const_2 ] * z3 +A2[_sage_const_0 ][_sage_const_2 ] * zp[_sage_const_2 ][_sage_const_0 ] != W3 + c1 * t3) 	|
			(A1[_sage_const_3 ] * z4 +A2[_sage_const_0 ][_sage_const_3 ] * zp[_sage_const_3 ][_sage_const_0 ] != W4 + c1 * t4)  ):
			return _sage_const_1 
		
		if self.domain.sigma_5(f) != z3 + r:
			return _sage_const_2 

		if((d != hash(bsn)) | (d*z5 + z6 != c2 * nym + w)):
			return _sage_const_3 
		
		if(g*z2*z3 + c1*(H*z1 + b*z2 - a*z4) - c1**_sage_const_2 *u != f+v):
			return _sage_const_4 
		return _sage_const_0 



