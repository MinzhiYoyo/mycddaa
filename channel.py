

# This file was *autogenerated* from the file channel.sage
from sage.all_cmdline import *   # import sage library


class Channel:
	def __init__(self):
		self.components = []  # 通信组件，用于广播数据使用
		self.multicastRecord = []  # 广播记录
	
	def register(self, component):  # 注册通信组件
		self.components.append(component)
		for record in self.multicastRecord:
			src, src_id, domain_id, msg, have_send = record
			if component.domain.id == domain_id and component.domain.id not in have_send:
				component.put(src, src_id, **msg)
				have_send.add(component.domain.id)
				break


	def Unicast(self, src, src_id, dst, dst_id, **msg):
		# 单播
		for component in self.components:
			if component.body_type == dst and component.body_id == dst_id:
				component.put(src, src_id, **msg)
				break

	def Multicast(self,src, src_id, domain_id, **msg):
		# 广播到整个域
		have_send = set()
		for component in self.components:
			if component.domain.id == domain_id:
				component.put(src, src_id, **msg)
				have_send.add(component.body_type)
		self.multicastRecord.append((src, src_id, domain_id, msg, have_send))




# 定义一个通信组件，每个实体都有一个通信组件
class CommunicateComponent:
	def __init__(self, domain, body_type, body_id):  # 域，实例类型，实例id
		self.buffer = {  # 输入缓冲区
			# memberi: {'message_name': message}, member is host, issuer, verifier, i is the index of member
		}
		self.domain = domain
		self.body_type = body_type
		self.body_id = body_id
	
	def get(self, member,id, msg_name):
		assert member in ['issuer', 'host', 'verifier'], 'member must be one of issuer, host, verifier'
		if id is None and member != 'host':
			id = self.domain.id
		member_id = member + str(id)
		if member_id not in self.buffer:
			return None
		if msg_name not in self.buffer[member_id]:
			return None
		return self.buffer[member_id][msg_name]
		
	def put(self, member, id=None, **msg):
		assert member in ['issuer', 'host', 'verifier'], 'member must be one of issuer, host, verifier'
		if id is None and member != 'host':
			id = self.domain.id
		member_id = member + str(id)
		if member_id not in self.buffer:
			self.buffer[member_id] = {}
		for k, v in msg.items():
			self.buffer[member_id][k] = v
		# send()



