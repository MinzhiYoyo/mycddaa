

# This file was *autogenerated* from the file Host.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
from TPM import TPM
from channel import Channel, CommunicateComponent
from domain import Domain
class Host:
	def __init__(self,id, tpm: TPM, domain: Domain, channel: Channel):
		self.id = id
		self.tpm = tpm
		self.domain = domain
		# 公开参数a，有一部是来源于tpm的
		self.a_h = self.domain.OK.random_element()
		# host私钥
		self.e_h = self.domain.OK.random_element()
		# TPM+Host的公开参数
		self.a = matrix([self.tpm.a_t, self.a_h])
		self.channel = channel
		self.componet = CommunicateComponent(self.domain, "host", self.id)
		self.channel.register(self.componet)

	def send(self,dst, id = None, **kwargv):
		if dst == 'public':  # 广播到整个域
			domain_id = self.domain.id
			self.channel.Multicast('host',self.id, domain_id, **kwargv)
		else:
			self.channel.Unicast('host', self.id, dst, id, **kwargv)

		


	
	def join_request(self, stage = _sage_const_1 ):  # 像issuer发送加入请求
		if stage == _sage_const_1 :
			u_1 =  self.tpm.join_request() + self.a_h * self.e_h
			
			# 零知识证明
			cc = hash((self.tpm.a_t, self.a_h))  # 哈希值，先a_t，再a_h，用tuple

			"""
			零知识证明过程
				生成随机数 c, y
				a是公开参数，e是秘密值
				计算(host端) 
					cc = hash(a)
					w = a * y
					z = c * e + y
					u = a * e

				发送 u, w, z, cc 保留 c
				验证零知识证明(issuer端)
					w == a*z - c * u
						a * y == a * c * e + a * y - c * a * e
					cc == hash(a)
			"""
			c = ZZ.random_element()  # 一个数
			y = matrix(_sage_const_1 , _sage_const_2 , lambda i, j: self.domain.D())
			w = self.a * y.transpose()
			z = matrix([self.tpm.mutiple_e_t(c), self.e_h * c]) + y

			# send(u_1, cc, w, z) to issuer
			self.send('issuer', self.domain.id, u_1 = u_1, cc = cc, w = w, z = z, c = c, a=self.a)
		elif stage == _sage_const_2 :
			# receive i, s, u from issuer
			self.i = self.componet.get('issuer', self.domain.id, 'i')
			self.s = self.componet.get('issuer', self.domain.id, 's')
			self.u = self.componet.get('issuer', self.domain.id, 'u')





	def sign_request(self, stage=_sage_const_1, *args):  # 发送签名请求
		if stage == _sage_const_1 :
			assert self.i is not None and self.s is not None and self.u is not None, f"请先发送加入请求, i={self.i}, s={self.s}, u={self.u}"
			# 1. 与TPM联合生成伪名
			d, e_n, nym, bsn = self.tpm.sign_request()

			# 生成承诺值
			A1 = [
				matrix(_sage_const_1 , _sage_const_2 , lambda i, j: self.domain.OK.random_element()),
				matrix(_sage_const_1 , _sage_const_2 , lambda i, j: self.domain.OK.random_element()),
				self.domain.OK.random_element(),
				matrix(_sage_const_1 , _sage_const_2 , lambda i, j: self.domain.OK.random_element())
			]

			A2 = matrix(_sage_const_1 , _sage_const_4 , lambda i, j: self.domain.OK.random_element())
			B = matrix(_sage_const_1 , _sage_const_4 , lambda i, j: self.domain.OK.random_element())

			s = [
				matrix([[self.s[_sage_const_0 ][_sage_const_0 ]],[self.s[_sage_const_1 ][_sage_const_0 ]]]),
				matrix([[self.s[_sage_const_2 ][_sage_const_0 ]],[self.s[_sage_const_3 ][_sage_const_0 ]]]),
			]

			p = matrix(_sage_const_4 , _sage_const_1 , lambda i, j: self.domain.OK.random_element())

			t1 = A1[_sage_const_0 ] * s[_sage_const_0 ] 											+ A2[_sage_const_0 ][_sage_const_0 ] * p[_sage_const_0 ][_sage_const_0 ]
			t2 = A1[_sage_const_1 ] * s[_sage_const_1 ] 											+ A2[_sage_const_0 ][_sage_const_1 ] * p[_sage_const_1 ][_sage_const_0 ]
			t3 = A1[_sage_const_2 ] * self.i 										+ A2[_sage_const_0 ][_sage_const_2 ] * p[_sage_const_2 ][_sage_const_0 ]
			t4 = self.tpm.mutiple_e_t(A1[_sage_const_3 ][_sage_const_0 ][_sage_const_0 ]) + A1[_sage_const_3 ][_sage_const_0 ][_sage_const_1 ] * self.e_h 	+ A2[_sage_const_0 ][_sage_const_3 ] * p[_sage_const_3 ][_sage_const_0 ]
			
			y1 = matrix(_sage_const_2 , _sage_const_1 , lambda i, j: self.domain.D())
			y2 = matrix(_sage_const_2 , _sage_const_1 , lambda i, j: self.domain.D())
			y3 = self.domain.D()
			y4 = matrix(_sage_const_2 , _sage_const_1 , lambda i, j: self.domain.D())
			yp = matrix(_sage_const_4 , _sage_const_1 , lambda i, j: self.domain.D())

			W1 = A1[_sage_const_0 ] * y1	+ A2[_sage_const_0 ][_sage_const_0 ] * yp[_sage_const_0 ][_sage_const_0 ]
			W2 = A1[_sage_const_1 ] * y2	+ A2[_sage_const_0 ][_sage_const_1 ] * yp[_sage_const_1 ][_sage_const_0 ]
			W3 = A1[_sage_const_2 ] * y3	+ A2[_sage_const_0 ][_sage_const_2 ] * yp[_sage_const_2 ][_sage_const_0 ]
			W4 = A1[_sage_const_3 ] * y4	+ A2[_sage_const_0 ][_sage_const_3 ] * yp[_sage_const_3 ][_sage_const_0 ]

			g = self.componet.get('issuer',self.domain.id, 'g')
			H = self.componet.get('issuer',self.domain.id, 'H')
			b = self.componet.get('issuer',self.domain.id, 'b')

			f1 = self.i * g * y2 + g * s[_sage_const_1 ] * y3 + H * y1 + b * y2 - self.a * y4
			t = B * p + f1
			v = g * y2 * y3 + B * yp
			y5 = self.domain.D()
			y6 = self.domain.D()
			w = d * y5 + y6

			W = [W1, W2, W3, W4]
			# send W, t, v, w to verifier
			self.send('verifier', self.domain.id, W = W, t = t, v = v, w = w)
			return 	A1, A2, B, W1, W2, W3, W4, t1, t2, t3, t4, d, nym, t, w, v, s, e_n, y1, y2, y3, y4, yp, p, bsn
		elif stage == _sage_const_2 :
			# receive c1, c2 from verifier
			c1 = self.componet.get('verifier', self.domain.id, 'c1')
			c2 = self.componet.get('verifier', self.domain.id, 'c2')
			
			A1, A2, B, W1, W2, W3, W4, t1, t2, t3, t4, d, nym, t, w, v, s, e_n, y1, y2, y3, y4, yp, p, bsn = args

			z1 = c1*s[_sage_const_0 ] + y1
			z2 = c1*s[_sage_const_1 ] + y2
			z3 = c1*self.i + y3
			z4 = matrix([[self.tpm.mutiple_e_t(c1)], [self.e_h * c1]]) + y4
			zp = c1 * p + yp

			r = self.domain.sigma_5(y3) - y3

			y5 = self.domain.D()
			y6 = self.domain.D()

			z5 = self.tpm.mutiple_e_t(c2) + y5
			z6 = e_n * c2 + y6

		
			# send A1 A2 B z1 z2 z3 z4 z5 z6 zp W1 W2 W3 W4 t1 t2 t3 t4 r d nym t w v a to issuer
			self.send('verifier', self.domain.id,
				A1 = A1, A2 = A2, B = B, 
				z1 = z1, z2 = z2, z3 = z3, z4 = z4, z5 = z5, z6 = z6, zp = zp, 
				W1 = W1, W2 = W2, W3 = W3, W4 = W4, 
				t1 = t1, t2 = t2, t3 = t3, t4 = t4, 
				r = r, d = d, nym = nym, t = t, w = w, v = v, a = self.a, u = self.u, bsn = bsn)



	def __eq__(self, other):
		return self.id == other.id
		

