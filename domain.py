

# This file was *autogenerated* from the file domain.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_70 = Integer(70); _sage_const_35 = Integer(35); _sage_const_4096 = Integer(4096); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_64 = Integer(64); _sage_const_3 = Integer(3)
from sage.stats.distributions.discrete_gaussian_polynomial import DiscreteGaussianDistributionPolynomialSampler
class Domain:
	def __init__(self,id, q = None, d = None):
		"""
		生成本域的公共参数
		q: 一个大素数
		d: 2的次方
		"""
		self.id = id
		self.q = pow(_sage_const_2 , _sage_const_70 ) - _sage_const_35  if q is None else q
		self.d = _sage_const_4096  if d is None else d

		# 定义多项式环
		self.rr = polygen(ZZ)
		# 定义多项式环
		OK = PolynomialRing(Zmod(self.q),'z').quotient(self.rr**self.d+_sage_const_1 , names=('zeta',)); (zeta,) = OK._first_ngens(1)
		self.zeta = zeta
		self.OK = OK
		# 定义同态映射
		self.H = Hom(OK, OK)
		# 定义同态映射
		self.sigma_5 = self.H([self.zeta**_sage_const_5 ])
		self.sigma_1 = self.H([self.zeta**(-_sage_const_1 )])
		# 定义离散高斯分布
		self.D = DiscreteGaussianDistributionPolynomialSampler(OK, _sage_const_64 , _sage_const_3 )

	# 定义 ==
	def __eq__(self, other):
		return self.id == other.id

	def __str__(self) -> str:
		return f"q={self.q}, d={self.d}"

