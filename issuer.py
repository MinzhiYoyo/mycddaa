

# This file was *autogenerated* from the file issuer.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
from domain import Domain
from channel import Channel, CommunicateComponent
class Issuer:
	def __init__(self,id, domain: Domain, channel:Channel):
		"""
		生成issuer的公私钥等参数
		"""
		self.domain = domain
		self.id = id
		self.componet = CommunicateComponent(self.domain, "issuer", self.id)
		self.channel = channel
		self.channel.register(self.componet)

		# 生成issuer的公私钥
		self.h = self.domain.OK.random_element()
		self.H = matrix([self.h ,_sage_const_1 ])
		self.R = matrix(_sage_const_2 , _sage_const_2 , lambda i, j: self.domain.OK.random_element())
		self.b = self.H * self.R
		delta = floor(sqrt(self.domain.q))
		self.g = matrix([_sage_const_1 , delta])  
		self.send('public', self.domain.id, h = self.h, b = self.b, g = self.g, R = self.R, H = self.H)


	def send(self,dst, id = None, **kwargv):
		if dst == 'public':
			domain_id = self.domain.id
			self.channel.Multicast('issuer',self.id, domain_id, **kwargv)
		else:
			self.channel.Unicast('issuer', self.id, dst, id, **kwargv)


	def join_response(self,host):
		host_id = host.id
		# 加入请求
		u_1 = self.componet.get('host', host_id, 'u_1')
		cc = self.componet.get('host', host_id, 'cc')
		w = self.componet.get('host', host_id, 'w')
		z = self.componet.get('host', host_id, 'z')
		a = self.componet.get('host', host_id, 'a')
		c = self.componet.get('host', host_id, 'c')

		# 检验零知识证明
		if (a * z.transpose() - c * u_1 != w)|(cc != hash((a[_sage_const_0][_sage_const_0], a[_sage_const_0][_sage_const_1]))):
			print("零知识证明失败，join失败\n")
			return
		
		# 生成整数 tau/i, s
		s = matrix(_sage_const_4 , _sage_const_1 , lambda i, j: self.domain.OK.random_element())
		i = ZZ.random_element()
		u = matrix([self.h, _sage_const_1 , self.b[_sage_const_0 ][_sage_const_0 ]+i * self.g[_sage_const_0 ][_sage_const_0 ], self.b[_sage_const_0 ][_sage_const_1 ]+i * self.g[_sage_const_0 ][_sage_const_1 ]]) * s - u_1

		# send i, s, u to host
		self.send('host', host_id, i = i, s = s, u = u)

		

	def __eq__(self, other):
		return self.id == other.id

